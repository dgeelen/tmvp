;NOTES
; 'Less' and 'greater' are for SIGNED ints
; 'below' and 'above' are for UNSIGNED ints

CrLf EQU 0ah, 0dh
newline EQU CrLf
True EQU 1
False EQU 0

FPS EQU 20

AUDIO_INT_FREQ EQU 8000 ;20000
QUARTZ_TICKS EQU 01234DDh ; 1193181hz

FRAME_SIZE EQU 80*50*2
AUDSAMP_SIZE EQU (AUDIO_INT_FREQ/FPS)
PALETTE_SIZE EQU 48
RENDER_AHEAD EQU 32
DECBUF_SIZE EQU ((FRAME_SIZE + PALETTE_SIZE + AUDSAMP_SIZE) * RENDER_AHEAD)
DECWIN_SIZE EQU 32 * 1024

;DEBUG EQU True
DEBUG EQU False

macro BufferSpaceLeft Head, Tail, Size
  local noadj
  ; Pre: Head and Tail point to the adresses of the begin- and end-points of the buffer contents
  ;      Size is the total size of the buffer
  ; Post: Eax contains the ammount of space left in the buffer

  mov  eax, [dword ptr Head]
  cmp  [dword ptr Tail], eax
  jb   noadj
  add eax, Size
noadj:
  sub eax, [dword ptr Tail]
endm

macro setpalette
  local l1, l2, exit
  ; uses al, cl, dx
  ; updates esi
  ; May be very slow due to accessing ports. *TODO* : VERIFY THIS
  ;
  ; Note on the palette structure:
  ; indexes 0-6 are colors 0 - 5 and 7
  ; indexes 7-14 are colors 8-15
  ; index 15 is color 6
  mov cl, 0                    ; first 8 palette entries
  xor cx, cx
  mov dx, 03C9h
l1:
  mov al,cl                    ; al = color#
  dec dx                       ; dx = 03C8h = select color
  out dx, al                   ; select color
  inc dx                       ; dx = 03C9h = modify color
  ;Note: l00p unrolled for t3h sp33d
  lodsb                        ; get a palette byte into al
  out dx, al                   ; output R
  lodsb                        ; get a palette byte into al
  out dx, al                   ; output G
  lodsb                        ; get a palette byte into al
  out dx, al                   ; output B
  inc cl
  cmp cl, 6
  jne short l1

  mov al,20                    ; al = color#
  dec dx                       ; dx = 03C8h = select color
  out dx, al                   ; select color
  inc dx                       ; dx = 03C9h = modify color
  ;Note: l00p unrolled for t3h sp33d
  lodsb                        ; get a palette byte into al
  out dx, al                   ; output R
  lodsb                        ; get a palette byte into al
  out dx, al                   ; output G
  lodsb                        ; get a palette byte into al
  out dx, al                   ; output B

  inc cl
  mov al,cl                    ; al = color#
  dec dx                       ; dx = 03C8h = select color
  out dx, al                   ; select color
  inc dx                       ; dx = 03C9h = modify color
  ;Note: l00p unrolled for t3h sp33d
  lodsb                        ; get a palette byte into al
  out dx, al                   ; output R
  lodsb                        ; get a palette byte into al
  out dx, al                   ; output G
  lodsb                        ; get a palette byte into al
  out dx, al                   ; output B
  inc cl
  add cl, 48                   ; next 8 palette entries
l2:
  mov al,cl                    ; al = color#
  dec dx                       ; dx = 03C8h = select color
  out dx, al                   ; select color
  inc dx                       ; dx = 03C9h = modify color
  ;Note: l00p unrolled for t3h sp33d
  lodsb                        ; get a palette byte into al
  out dx, al                   ; output R
  lodsb                        ; get a palette byte into al
  out dx, al                   ; output G
  lodsb                        ; get a palette byte into al
  out dx, al                   ; output B
  inc cl
  cmp cl, 64
  jne short l2
exit:
endm

macro vsync
  local l1, l2
  ; Pre: -
  ; Post: Monitor is in VSync period
  ; Modifies al, dx
  mov  dx, 03dah
l1:
  in   al, dx
  and  al, 8
  jnz  l1
l2:
  in   al, dx
  and  al, 8
  jz   l2
endm

;---File manipulation macros---
; Most of these look like they are really shorthands
; for their DOS Function code ;)

;---_fread()---
macro _fread
  local exit, strSkip, strfread
  ; Pre : ebx == filehandle, ecx == nr bytes to read, edx == ptr to buffer
  ;       size(buffer) >= ecx
  ; Post: The buffer has been filled with no more than ecx bytes
  ;       CF clear indicates eax contains actual nr bytes read
  ;                          eax == 0 => EOF
  ;       CF set indicates an error occured
  ;                          eax == error code.
  ; Modifies eax

  if debug eq true
  lea  eax, [strfread]
  push ebx
  push eax
  call _printf                 ; destroys eax, ebx
  pop  eax
  pop  ebx
  jmp  short strSkip
  strfread db '_fread(): reading from filehandle %i',newline,36,0
  strSkip:
  endif                        ; delete above lines to disable dbg

  xor  eax, eax                ; clear eax in order to accurately show the
  mov  ah, 03Fh                ; number of bytes read
  int  021h                    ; do it
exit:
endm


;---_fwrite()---
macro _fwrite
  local exit, strSkip, strfwrite
  ; Pre : ebx == filehandle, ecx == nr bytes to write, edx == ptr to buffer
  ; Post: Carry is clear, and eax bytes have been written to file
  ;       Carry set, and eax indicates an error code
  ; Modifies eax

  if debug eq true
  lea  eax, [strfwrite]
  push ebx
  push eax
  call _printf                 ; destroys eax, ebx
  pop  eax
  pop  ebx
  jmp  short strSkip
  strfwrite db '_fwrite(): writing to filehandle %i',newline,36,0
  strSkip:
  endif                        ; delete above lines to disable dbg

  xor  eax, eax                ; clear eax in order to accurately show the
  mov  ah, 040h                ; number of bytes written
  int  021h
exit:
endm

;---_fclose()---
macro _fclose
  local exit, strSkip, strfclose
  ; pre : Valid filehandle is in ebx
  ; post: CF is clear on succes, and file is closed.
  ;       CF is set on failure, file is in undetermined state
  ;                             eax = error code
  ; Modifies eax on error

  if debug eq true
  lea  eax, [strfclose]
  push ebx
  push eax
  call _printf                 ; destroys eax, ebx
  pop  eax
  pop  ebx
  jmp  short strSkip
  strfclose db '_fclose(): Closing filehandle %i',newline,36,0
  strSkip:
  endif                        ; delete above lines to disable dbg

  push eax                     ; preserve eax
  xor  eax, eax                ; clear in case of error
  mov  ah, 03Eh                ; close file
  int  021h                    ; on error set carry
  jnc  exit
  mov  [dword ptr esp], eax    ; replace old value of eax with error code
exit:
  pop  eax                     ; pop old value or error code
endm

;---_fopen()---
READONLY  EQU 00000000b
WRITEONLY EQU 00000001b
READWRITE EQU 00000010b
macro _fopen modechar
  local exit, strfopen, retry, strSkip ; this must be the first line in a macro ?
  ; Pre: edx contains filenameptr
  ; Post: If possible, file is opened and handle returned in EAX
  ;       If file does not exist, it is created
  ; Modifies: eax, ebx

  ifb <filenameptr>
    display "<MACROS.MAC> _fopen: Need a filenameptr"
    err
  endif
  ifb <modechar>
    display "<MACROS.MAC> _fopen: Warning, no modechar specified, assuming READONLY"
    modechar EQU READONLY
  endif

if debug eq true
  push ecx
  mov  ecx, edx

  push modechar
  push edx
  lea  eax, [strfopen]
  push eax
  call _printf                 ; destroys eax, ebx
  add  esp, 3*4

  mov  edx, ecx
  pop  ecx
  jmp  short strSkip
  strfopen db '_fopen(): Opening `%s'' with mode `%i''',newline,36,0
  strSkip:
  endif                        ; delete above lines to disable dbg

                               ; edx already ptr to filename (Pre)
  xor  eax, eax                ; clear eax
  mov  ah, 03Dh                ; open existing file
  mov  al, modechar            ; one of RO/WO/RW
  int  021h                    ; try to open it
  jnc  short exit              ; if succes eax=filehandle, else eax=error#
  cmp  al, 2                   ; File not found, destroys carry
  stc                          ; restore error condition
  jne  short exit              ; exit with error
  mov  bl, modechar            ; are we opening this file RO or also W
  cmp  bl, READONLY            ;
  stc                          ; again restore error
  je   short exit              ; if file is being opened in READONLY exit
  mov  ah, 03Ch                ; Otherwise create a new file
  int  021h                    ; if file creation ok, ax==filehandle
exit:
endm

;------------------------------